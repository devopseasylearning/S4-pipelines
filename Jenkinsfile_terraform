pipeline {
    agent {
                label ("jenkins")
            }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout (time: 60, unit: 'MINUTES')
        timestamps()
      }
    environment {
        DOCKERHUB_CREDS = credentials('dockerhub-creds') 
    }

    stages {

        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                            choice(
                                choices: ['DEPLOY', 'DESTROY'], 
                                name: 'STATE'
                            ),


                             string(name: 'WARNTIME',
                             defaultValue: '0',
                            description: '''Warning time (in minutes) before starting upgrade'''),

                        string(
                             defaultValue: 'develop',
                             name: 'Please_leave_this_section_as_it_is',
                            ),


                        ]),

                    ])
                }
            }
        }


       stage('warning') {
      steps {
        script {
            notifyUpgrade(currentBuild.currentResult, "WARNING")
            sleep(time:env.WARNTIME, unit:"MINUTES")
        }
      }
    }



        stage('Docker Login') {
            steps {
                script {
                    // Log in to Docker Hub
                    sh '''
                        echo "${DOCKERHUB_CREDS_PSW}" | docker login --username "${DOCKERHUB_CREDS_USR}" --password-stdin
                    '''
                }
            }
        }



        stage('Build auth') {
           when{  
            expression {
              STATE == 'DEPLOY' }
              }
            steps {
                script {
                    // Log in to Docker Hub
                    sh '''
                     cd $WORKSPACE/TF/weather-app/auth
                     docker build -t devopseasylearning/weather-app-auth:${BUILD_NUMBER} .
                     docker push devopseasylearning/weather-app-auth:${BUILD_NUMBER}
                    '''
                }
            }
        }






        stage('Build db') {
           when{  
            expression {
              STATE == 'DEPLOY' }
              }
            steps {
                script {
                    // Log in to Docker Hub
                    sh '''
                        cd $WORKSPACE/TF/weather-app/DB
                        docker build -t devopseasylearning/weather-app-db:${BUILD_NUMBER} .
                        docker push devopseasylearning/weather-app-db:${BUILD_NUMBER} 
                        
                    '''
                }
            }
        }




        stage('Build ui') {
           when{  
            expression {
              STATE == 'DEPLOY' }
              }
            steps {
                script {
                    // Log in to Docker Hub
                    sh '''
                        cd $WORKSPACE/TF/weather-app/UI
                        docker build -t devopseasylearning/weather-app-ui:${BUILD_NUMBER} .
                        docker push devopseasylearning/weather-app-ui:${BUILD_NUMBER} 
                    '''
                }
            }
        }



        stage('Build weather') {
           when{  
            expression {
              STATE == 'DEPLOY' }
              }

            steps {
                script {
                    // Log in to Docker Hub
                    sh '''
                        cd $WORKSPACE/TF/weather-app/weather
                        docker build -t devopseasylearning/weather-app-weather:${BUILD_NUMBER} .
                        docker push devopseasylearning/weather-app-weather:${BUILD_NUMBER}
                    '''
                }
            }
        }

    stage('build deployment image') {

	      steps {
	        script {
	          withCredentials([
	            string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
	            string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')

	          ]) {

	            sh '''
sudo docker rmi devopseasylearning/builder:latest || true
cat <<EOF > Dockerfile
   FROM ubuntu:22.04
   RUN  apt update  --fix-missing
   WORKDIR /a
   ENV AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
   ENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
   ENV AWS_DEFAULT_REGION="us-west-2"
   RUN apt install -y  curl software-properties-common wget vim unzip
   RUN wget -O- https://apt.releases.hashicorp.com/gpg |  gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg 
   RUN echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" |  tee /etc/apt/sources.list.d/hashicorp.list 
   RUN  apt update &&  apt install terraform  -y
   RUN terraform version 
   CMD ["bash"] 
EOF
   docker build -t devopseasylearning/builder:latest .
	            '''
	          }

	        }

        }
    }




 

   stage('terraform init & validate' ) {
            agent {
                docker {
                    image 'devopseasylearning/builder:latest'  
                    args '-v $WORKSPACE/TF/:/a'  
                }
            }
      
            steps {
                script {

                    sh '''
                    cd TF
                    terraform validate
                    
                    '''
                }
            }
        }



   stage('terraform pland & apply' ) {
            agent {
                docker {
                    image 'devopseasylearning/builder:latest'  
                    args '-v $WORKSPACE/TF/:/a'  
                }
            }
      when{  
            expression {
              STATE == 'DEPLOY' }
              }
            steps {
                script {

                    sh '''
                    cd TF
                    ls -l
                    ls -l weather-app
rm -rf weather-app/docker-compose.yaml
cat <<EOF > weather-app/docker-compose.yaml
  version: "3.9"
  services:
    auth:
      restart: always
      image: devopseasylearning/weather-app-auth:${BUILD_NUMBER}
      depends_on:
        - db
      environment:
        DB_HOST: db
        DB_PASSWORD: my-secret-pw
      networks:
        - app-net
    ui:
      restart: always
      image: devopseasylearning/weather-app-ui:${BUILD_NUMBER}
      depends_on:
        - auth
        - weather
      environment:
        AUTH_HOST: auth
        AUTH_PORT: 8080
        WEATHER_HOST: weather
        WEATHER_PORT: 5000
      ports:
        - "3000:3000"
      networks:
        - app-net
    weather:
      restart: always
      build: devopseasylearning/weather-app-weather:${BUILD_NUMBER}
      environment:
        APIKEY: ecbc396f46mshb65cbb1f82cf334p1fcc87jsna5e962a3c542
      networks:
        - app-net
    db:
      restart: always
      image: devopseasylearning/weather-app-db:${BUILD_NUMBER}
      environment:
        MYSQL_ROOT_PASSWORD: my-secret-pw
      networks:
        - app-net
      volumes:
        - ./db-data:/var/lib/mysql
  
  networks:
    app-net:
      driver: bridge
  volumes:
    db-data:

EOF

cat weather-app/docker-compose.yaml
pwd

                    terraform init
                    terraform apply --auto-approve
                    
                    '''
                }
            }
        }



   stage('terraform destroy' ) {
      when{  
            expression {
              STATE == 'DESTROY' }
              }
            agent {
                docker {
                    image 'devopseasylearning/builder:latest'  
                    args '-v $WORKSPACE/TF/:/a'  
                }
            }
      
            steps {
                script {

                    sh '''
                    cd TF
                    terraform init
                    terraform destroy --auto-approve
                    
                    '''
                }
            }
        }

  


   stage('wait for for readiness') {
      when{  
            expression {
              STATE == 'DEPLOY' }
              }

      
            steps {
                script {

                    sh '''
                  sleep 10

                    '''
                }
            }
        }


}

post {
    always {
      script {
        notifyUpgrade(currentBuild.currentResult, "POST")
      }
    }
    
  }



}


    



def notifyUpgrade(String buildResult, String whereAt) {
  if (Please_leave_this_section_as_it_is == 'origin/develop') {
    channel = 'development-alerts'
  } else {
    channel = 'development-alerts'
  }
  if (buildResult == "SUCCESS") {
    switch(whereAt) {
      case 'WARNING':
        slackSend(channel: channel,
                color: "#439FE0",
                message: "s4-weather-app: Upgrade starting in ${env.WARNTIME} minutes @ ${env.BUILD_URL}  Application s4-weather-app")
        break
    case 'STARTING':
      slackSend(channel: channel,
                color: "good",
                message: "s4-weather-app: Starting upgrade @ ${env.BUILD_URL} Application s4-weather-app")
      break
    default:
        slackSend(channel: channel,
                color: "good",
                message: "s4-weather-app: Upgrade completed successfully @ ${env.BUILD_URL}  Application s4-weather-app")
        break
    }
  } else {
    slackSend(channel: channel,
              color: "danger",
              message: "s4-weather-app: Upgrade was not successful. Please investigate it immediately.  @ ${env.BUILD_URL}  Application s4-weather-app")
  }
}